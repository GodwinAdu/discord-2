generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())  
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

// Define the school model
model School {
  id                   String      @id @default(uuid())
  boardName            String
  affiliationNumber    String
  name                 String
  passPercentage       Float
  extracurricular      Extracurricular
  infrastructure       Infrastructure
  teacherStudentRatio  Float
  timings              Timing
  affordability        Affordability
  transportFacility    TransportFacility
  youtubeLink          String?

   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// Define the extracurricular activities model
model Extracurricular {
  id         String    @id @default(uuid())
  sports     Boolean @default(false)
  arts       Boolean @default(false)
  music      Boolean @default(false)
  debate     Boolean @default(false)
  community  Boolean @default(false)
  schoolId String
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])

}

// Define the infrastructure model
model Infrastructure {
  id           String     @id @default(uuid())
  smartClass   Boolean @default(false)
  library      Boolean @default(false)
  laboratories Boolean @default(false)
  playground   Boolean @default(false)
  schoolId String
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])

}

// Define the timing model
model Timing {
  id        String    @id @default(uuid())
  grade     String
  startTime String
  endTime   String
  schoolId String
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])

}

// Define the affordability model
model Affordability {
  id            String     @id @default(uuid())
  admissionFee  String
  monthlyFee    String
  scholarships Boolean @default(false)
  schoolId String
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])

}

// Define the transport facility model
model TransportFacility {
  id           String    @id @default(uuid())
  safety       Boolean @default(false)
  reliability  Boolean @default(false)
  routes       String
  schoolId String
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])

}
